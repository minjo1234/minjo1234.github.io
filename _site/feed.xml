

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>민이의 개발 블로그</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-04-26T17:33:34+08:00</updated>
  <author>
    <name>your_full_name</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 your_full_name </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Spring @Transactional 어노테이션 완벽 가이드</title>
    <link href="http://localhost:4000/posts/Transaction_Annotation-copy/" rel="alternate" type="text/html" title="Spring @Transactional 어노테이션 완벽 가이드" />
    <published>2025-04-26T10:00:00+08:00</published>
  
    <updated>2025-04-26T10:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/Transaction_Annotation-copy/</id>
    <content type="text/html" src="http://localhost:4000/posts/Transaction_Annotation-copy/" />
    <author>
      <name>minjo</name>
    </author>

  
    
    <category term="DB" />
    
    <category term="Transaction" />
    
    <category term="Spring" />
    
  

  <summary>Transaction Annotation과 일관성(Consistency)    Transaction의 특성중 C(Consistency)를 공부하는 도중 Transactional 어노테이션을 이용하면 단순히 DB에서뿐만아니라 비즈니스로직과의 연결을 이용하여 하나의 메소드를 트랜잭션의 단위로 본다는 것을 알게되었다.    1.@Transactional  # 개발자 입장에서 하나의 메소드를 @Transactional 어노테이션을 이용하여 하나의 트랜잭션으로 보는 것이다.  @Transactional public void saveService(MyServiceDTO dto) { 		if(dto.size() &amp;amp;lt; 0) { 			throw new IllegalArgumentException(&amp;quot;아무것도 존재하지...</summary>

  </entry>

  
  <entry>
    <title>DB 트랜잭션(Transaction)</title>
    <link href="http://localhost:4000/posts/DB_Transaction_Start/" rel="alternate" type="text/html" title="DB 트랜잭션(Transaction)" />
    <published>2025-04-21T10:00:00+08:00</published>
  
    <updated>2025-04-21T10:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/DB_Transaction_Start/</id>
    <content type="text/html" src="http://localhost:4000/posts/DB_Transaction_Start/" />
    <author>
      <name>minjo</name>
    </author>

  
    
    <category term="DB" />
    
    <category term="Transaction" />
    
  

  <summary>트랜잭션의 개요    서비스 운영하면서 DB 성능 저하 이슈가 발생하면, 특정 쿼리만 골라서 성능을 개선하였다. 하지만 이러한 경우 다수의 쿼리가 동시에 실행되거나, 중간에 실패하였을 때 데이터가 꼬이는 현상이 발생하면서 성능 최적화 뿐만 아니라 트랜잭션 자체의 이해가 더 중요한 문제임을 깨달았다.  이 글을 통해 트랜잭션의 개념을 깊이있게 이해하고자 한다.    흔히 DB를 사용한다면 트랜잭션과 트랜잭션의 특징(ACID)를 간단하게 알고있겠지만 깊이 있게 트랜잭션을 이해하고 쿼리를 작성하지는 않는다고 생각한다.  트랜잭션을 깊이 있게 이해하면 동시성 제어, 트랜잭션 분산 처리, 성능 최적화, 고립성 수준(Isolation Level) 등을 보다 정확히 다룰 수 있다. 이 글에서는 개발자 관점에서 이러...</summary>

  </entry>

  
  <entry>
    <title>1️⃣ Vue Component 부모,자식 컴포넌트 이해하기.</title>
    <link href="http://localhost:4000/posts/Vue-CDN-Component-copy/" rel="alternate" type="text/html" title="1️⃣ Vue Component 부모,자식 컴포넌트 이해하기." />
    <published>2025-03-14T10:00:00+08:00</published>
  
    <updated>2025-03-14T10:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/Vue-CDN-Component-copy/</id>
    <content type="text/html" src="http://localhost:4000/posts/Vue-CDN-Component-copy/" />
    <author>
      <name>minjo</name>
    </author>

  
    
    <category term="Vue" />
    
    <category term="Javascript" />
    
  

  <summary>1️⃣ Vue Component 부모,자식 컴포넌트 이해하기.  035 CDN To Component (CDN 방식에서 컴포넌트 방식으로)  저번시간에 SSR,CSR의 장단점을 가지고 페이지를 수정하는 예시를 간단하게 들려고 합니다.  하지만 현재 프로젝트에서는 Vue server를 따로 분리하지 않았기에 운영중인 서비스를 위해서라도 component 형식이 필요한 페이지들은 현재 방식으로 개발한 이후, Vue server를 도입하면 유지보수가 빠르다는 생각이 들어 CDN 방식의 component를 이용해보려고 합니다.  탭(Tab)을 사용하는 페이지처럼 화면 전환 없이 동작해야 하는 UI라면, SPA(Single Page Application) 방식이 더 적합합니다. 그래서 기존에는 CDN 방식으로 ...</summary>

  </entry>

  
  <entry>
    <title>0️⃣ SSR에서 CSR을 선택한 이유(feat Vue)</title>
    <link href="http://localhost:4000/posts/SSR-toCSR/" rel="alternate" type="text/html" title="0️⃣ SSR에서 CSR을 선택한 이유(feat Vue)" />
    <published>2025-03-11T10:00:00+08:00</published>
  
    <updated>2025-04-14T10:42:13+08:00</updated>
  
    <id>http://localhost:4000/posts/SSR-toCSR/</id>
    <content type="text/html" src="http://localhost:4000/posts/SSR-toCSR/" />
    <author>
      <name>minjo</name>
    </author>

  
    
    <category term="Vue" />
    
    <category term="Javascript" />
    
  

  <summary>0️⃣ SSR에서 CSR을 선택한 이유(feat Vue)  현재 프로젝트는 한 화면에서 여러 탭을 통해 다양한 화면을 렌더링하는 구조다. SSR 기반 구조는 초기 로딩은 빠르지만 탭 전환 시 전체 페이지를 다시 받아야 해서 UX가 좋지 않다. 이런 이유로 CSR(Client-Side Rendering) 방식으로 전환을 고려 중이다.  전환 시 다음과 같은 작업이 필요하다:     기존 Vue CDN + Thymeleaf에서 사용하던 서버 렌더링 문법 제거   Spring의 Model 객체 사용 제거 및 API 기반 구조로 재편   Vue 앱을 별도 서버로 분리 (예: Vite, Vueserver 등 사용)   기존 외부 라이브러리(jQuery, Select2 등)와의 렌더링 이슈로 불필요한 함수 제거 ...</summary>

  </entry>

  
  <entry>
    <title>Vue와 jQuery를 함께 사용할 때 이벤트 위임은 누구에게?</title>
    <link href="http://localhost:4000/posts/Vue-document/" rel="alternate" type="text/html" title="Vue와 jQuery를 함께 사용할 때 이벤트 위임은 누구에게?" />
    <published>2025-03-10T10:00:00+08:00</published>
  
    <updated>2025-03-10T10:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/Vue-document/</id>
    <content type="text/html" src="http://localhost:4000/posts/Vue-document/" />
    <author>
      <name>minjo</name>
    </author>

  
    
    <category term="Vue" />
    
    <category term="Javascript" />
    
  

  <summary>🤷‍♂️ Vue와 jQuery를 함께 사용할 때 이벤트 위임은 누구에게?  실무에서 Vue와 외부 라이브러리(jQuery 등)를 혼용해서 사용하는 경우가 종종 발생한다. 특히 레거시 프로젝트를 유지보수하거나, Vue에서 감지하지 못하는 데이터 변화를 처리할 때 jQuery를 사용하는 경우가 많다.  이 과정에서 이벤트 위임을 Vue 쪽으로 처리해야 하는지, jQuery 쪽으로 처리해야 하는지 헷갈리는 경우가 생긴다. 현재 진행 중인 프로젝트에서도 Vue와 jQuery를 같이 사용 중인데, Vue의 이벤트가 작동하지 않는 경우가 있어 원인을 분석하게 되었다.    코드로 알아보기.  ✅ 예시:회의 참석자를 선택하는 select2 컴포넌트 간단한 예시로, 회의실 참석자를 설정하기 위한 태그를 구현했다. s...</summary>

  </entry>

</feed>


