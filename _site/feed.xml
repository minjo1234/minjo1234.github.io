

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>민이의 개발 블로그</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-05-06T10:40:05+08:00</updated>
  <author>
    <name>your_full_name</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 your_full_name </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Firebase로 백엔드 대체하는 법 (설명편)</title>
    <link href="http://localhost:4000/posts/Firebase/" rel="alternate" type="text/html" title="Firebase로 백엔드 대체하는 법 (설명편)" />
    <published>2025-04-06T10:00:00+08:00</published>
  
    <updated>2025-04-06T10:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/Firebase/</id>
    <content type="text/html" src="http://localhost:4000/posts/Firebase/" />
    <author>
      <name>minjo</name>
    </author>

  
    
    <category term="Backend" />
    
    <category term="Cloud" />
    
  

  <summary>Firebase로 백엔드 대체하기.    나는 백엔드 개발자다. Spring Boot 기반의 API 서버를 설계하고, 때론 Vue.js를 써서 프론트까지 구현하는 풀스택 개발자이기도 하다. 혼자서 간단한 앱을 개발할 때조차도 엔티티 설계, 비즈니스 로직 고민, API 구성 등에 시간이 오래 걸린다. 그래서 요즘 고민하고 있다. 생산성을 높일 방법은 없을까?  그래서 시작했다. Firebase를 활용해 백엔드 개발을 대체해보기.     앞으로 Firebase의 기능들을 하나씩 사용해보며 실시간으로 DBMS와의 장단점도 함께 정리해볼 예정이다.     🛠️ 개발 환경     개발언어 : Flutter 백엔드 : Firebase     그래서 Firebase를 간략히 설명하는 시간을 가지려고하는데,  🔥 F...</summary>

  </entry>

  
  <entry>
    <title>DB 트랜잭션의 동시성과 고립성, 성능은 어떻게 지킬까?</title>
    <link href="http://localhost:4000/posts/Transaction_IsolationLevel/" rel="alternate" type="text/html" title="DB 트랜잭션의 동시성과 고립성, 성능은 어떻게 지킬까?" />
    <published>2025-04-01T10:00:00+08:00</published>
  
    <updated>2025-04-01T10:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/Transaction_IsolationLevel/</id>
    <content type="text/html" src="http://localhost:4000/posts/Transaction_IsolationLevel/" />
    <author>
      <name>minjo</name>
    </author>

  
    
    <category term="DB" />
    
    <category term="Transaction" />
    
    <category term="ACID" />
    
  

  <summary>트랜잭션의 고립성과 동시성 제어 - 성능은 어떻게 유지될까?    트랜잭션(Transaction)의 특징 중 하나인 고립성(Isolation)에 대해 공부하던 중 한 가지 의문이 들었습니다.     “고립성 때문에 트랜잭션이 순차적으로만 실행된다면, DB 성능은 매우 낮아지는 것 아닌가?”   하지만 실무에서는 수많은 트랜잭션이 동시에 수행되면서도 성능이 잘 나옵니다. 어떻게 이러한 성능 저하를 방지하고, 동시에 고립성을 보장할 수 있는 걸까요?    🔐 고립성(Isolation) 개념 다시 보기  Isolation은 하나의 트랜잭션이 수행 중일 때, 다른 트랜잭션이 그 중간 상태를 볼 수 없도록 보장하는 성질입니다. 즉, 격리된 상태로 트랜잭션이 동작해야 데이터의 정합성이 보장됩니다. 그렇다고 모든 ...</summary>

  </entry>

  
  <entry>
    <title>Spring @Transactional 어노테이션 완벽 가이드</title>
    <link href="http://localhost:4000/posts/Transaction_Annotation-copy-2/" rel="alternate" type="text/html" title="Spring @Transactional 어노테이션 완벽 가이드" />
    <published>2025-03-26T10:00:00+08:00</published>
  
    <updated>2025-03-26T10:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/Transaction_Annotation-copy-2/</id>
    <content type="text/html" src="http://localhost:4000/posts/Transaction_Annotation-copy-2/" />
    <author>
      <name>minjo</name>
    </author>

  
    
    <category term="DB" />
    
    <category term="Transaction" />
    
    <category term="Spring" />
    
  

  <summary>Transaction Annotation과 일관성(Consistency)    Transaction의 특성중 C(Consistency)를 공부하는 도중 Transactional 어노테이션을 이용하면 단순히 DB에서뿐만아니라 비즈니스로직과의 연결을 이용하여 하나의 메소드를 트랜잭션의 단위로 본다는 것을 알게되었다.    1.@Transactional  # 개발자 입장에서 하나의 메소드를 @Transactional 어노테이션을 이용하여 하나의 트랜잭션으로 보는 것이다.  @Transactional public void saveService(MyServiceDTO dto) { 		if(dto.size() &amp;amp;lt; 0) { 			throw new IllegalArgumentException(&amp;quot;아무것도 존재하지...</summary>

  </entry>

  
  <entry>
    <title>DB 트랜잭션(Transaction)</title>
    <link href="http://localhost:4000/posts/DB_Transaction_Start/" rel="alternate" type="text/html" title="DB 트랜잭션(Transaction)" />
    <published>2025-03-21T10:00:00+08:00</published>
  
    <updated>2025-05-01T22:23:40+08:00</updated>
  
    <id>http://localhost:4000/posts/DB_Transaction_Start/</id>
    <content type="text/html" src="http://localhost:4000/posts/DB_Transaction_Start/" />
    <author>
      <name>minjo</name>
    </author>

  
    
    <category term="DB" />
    
    <category term="Transaction" />
    
  

  <summary>트랜잭션의 개요    서비스 운영하면서 DB 성능 저하 이슈가 발생하면, 특정 쿼리만 골라서 성능을 개선하였다. 하지만 이러한 경우 다수의 쿼리가 동시에 실행되거나, 중간에 실패하였을 때 데이터가 꼬이는 현상이 발생하면서 성능 최적화 뿐만 아니라 트랜잭션 자체의 이해가 더 중요한 문제임을 깨달았다.  이 글을 통해 트랜잭션의 개념을 깊이있게 이해하고자 한다.    흔히 DB를 사용한다면 트랜잭션과 트랜잭션의 특징(ACID)를 간단하게 알고있겠지만 깊이 있게 트랜잭션을 이해하고 쿼리를 작성하지는 않는다고 생각한다.  트랜잭션을 깊이 있게 이해하면 동시성 제어, 트랜잭션 분산 처리, 성능 최적화, 고립성 수준(Isolation Level) 등을 보다 정확히 다룰 수 있다. 이 글에서는 개발자 관점에서 이러...</summary>

  </entry>

  
  <entry>
    <title>1️⃣ Vue Component 부모,자식 컴포넌트 이해하기.</title>
    <link href="http://localhost:4000/posts/Vue-CDN-Component-copy/" rel="alternate" type="text/html" title="1️⃣ Vue Component 부모,자식 컴포넌트 이해하기." />
    <published>2025-03-14T10:00:00+08:00</published>
  
    <updated>2025-03-14T10:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/Vue-CDN-Component-copy/</id>
    <content type="text/html" src="http://localhost:4000/posts/Vue-CDN-Component-copy/" />
    <author>
      <name>minjo</name>
    </author>

  
    
    <category term="Vue" />
    
    <category term="Javascript" />
    
  

  <summary>1️⃣ Vue Component 부모,자식 컴포넌트 이해하기.  035 CDN To Component (CDN 방식에서 컴포넌트 방식으로)  저번시간에 SSR,CSR의 장단점을 가지고 페이지를 수정하는 예시를 간단하게 들려고 합니다.  하지만 현재 프로젝트에서는 Vue server를 따로 분리하지 않았기에 운영중인 서비스를 위해서라도 component 형식이 필요한 페이지들은 현재 방식으로 개발한 이후, Vue server를 도입하면 유지보수가 빠르다는 생각이 들어 CDN 방식의 component를 이용해보려고 합니다.  탭(Tab)을 사용하는 페이지처럼 화면 전환 없이 동작해야 하는 UI라면, SPA(Single Page Application) 방식이 더 적합합니다. 그래서 기존에는 CDN 방식으로 ...</summary>

  </entry>

</feed>


